{"ast":null,"code":"var _jsxFileName = \"D:\\\\DoAnCoSo2\\\\doancoso2-client\\\\src\\\\hooks\\\\useForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function useForm(initialFValues) {\n  _s();\n\n  let validateOnChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let validate = arguments.length > 2 ? arguments[2] : undefined;\n  const [values, setValues] = useState(initialFValues);\n  const [errors, setErrors] = useState({});\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n    if (validateOnChange) validate({\n      [name]: value\n    });\n  };\n\n  const resetForm = () => {\n    setValues(initialFValues);\n    setErrors({});\n  };\n\n  return {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange,\n    resetForm\n  };\n}\n\n_s(useForm, \"eRFbKdGQbiaa9HoEdb7CtqsAoqM=\");\n\nexport function Form(props) {\n  const {\n    children,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    autoComplete: \"off\",\n    ...other,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_c = Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["D:/DoAnCoSo2/doancoso2-client/src/hooks/useForm.jsx"],"names":["React","useState","useForm","initialFValues","validateOnChange","validate","values","setValues","errors","setErrors","handleInputChange","e","name","value","target","resetForm","Form","props","children","other"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,OAAO,SAASC,OAAT,CAAiBC,cAAjB,EAAqE;AAAA;;AAAA,MAApCC,gBAAoC,uEAAjB,KAAiB;AAAA,MAAVC,QAAU;AAExE,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAACE,cAAD,CAApC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMS,iBAAiB,GAAGC,CAAC,IAAI;AAC3B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AACAP,IAAAA,SAAS,CAAC,EACN,GAAGD,MADG;AAEN,OAACM,IAAD,GAAQC;AAFF,KAAD,CAAT;AAIA,QAAIT,gBAAJ,EACIC,QAAQ,CAAC;AAAE,OAACO,IAAD,GAAQC;AAAV,KAAD,CAAR;AACP,GARD;;AAUA,QAAME,SAAS,GAAG,MAAM;AACpBR,IAAAA,SAAS,CAACJ,cAAD,CAAT;AACAM,IAAAA,SAAS,CAAC,EAAD,CAAT;AACH,GAHD;;AAKA,SAAO;AACHH,IAAAA,MADG;AAEHC,IAAAA,SAFG;AAGHC,IAAAA,MAHG;AAIHC,IAAAA,SAJG;AAKHC,IAAAA,iBALG;AAMHK,IAAAA;AANG,GAAP;AAQH;;GA5Beb,O;;AA8BhB,OAAO,SAASc,IAAT,CAAcC,KAAd,EAAqB;AAExB,QAAM;AAAEC,IAAAA,QAAF;AAAY,OAAGC;AAAf,MAAyBF,KAA/B;AACA,sBACI;AAAM,IAAA,YAAY,EAAC,KAAnB;AAAA,OAA6BE,KAA7B;AAAA,cACKF,KAAK,CAACC;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;KAReF,I","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport function useForm(initialFValues, validateOnChange = false, validate) {\r\n\r\n    const [values, setValues] = useState(initialFValues);\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const handleInputChange = e => {\r\n        const { name, value } = e.target\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n        if (validateOnChange)\r\n            validate({ [name]: value })\r\n    }\r\n\r\n    const resetForm = () => {\r\n        setValues(initialFValues);\r\n        setErrors({})\r\n    }\r\n\r\n    return {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    };\r\n}\r\n\r\nexport function Form(props) {\r\n\r\n    const { children, ...other } = props;\r\n    return (\r\n        <form autoComplete=\"off\" {...other}>\r\n            {props.children}\r\n        </form>\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}