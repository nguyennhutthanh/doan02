Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var styled = require('styled-components');
var polished = require('polished');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable no-bitwise */
/* eslint-disable prefer-destructuring */
function lightOrDark(color) {
    // Variables for red, green, blue values
    var r;
    var g;
    var b;
    var colorTemp = color;
    // Check the format of the color, HEX or RGB?
    if (colorTemp.match(/^rgb/)) {
        // If RGB --> store the red, green, blue values in separate variables
        colorTemp = colorTemp.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/);
        r = colorTemp[1];
        g = colorTemp[2];
        b = colorTemp[3];
    }
    else {
        // If hex --> Convert it to RGB: http://gist.github.com/983661
        colorTemp = +("0x" + colorTemp
            .slice(1)
            .replace(colorTemp.length < 5 && /./g, '$&$&'));
        r = colorTemp >> 16;
        g = (colorTemp >> 8) & 255;
        b = colorTemp & 255;
    }
    // HSP (Highly Sensitive Poo) equation from http://alienryderflex.com/hsp.html
    var hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));
    // Using the HSP value, determine whether the color is light or dark
    if (hsp > 127.5) {
        return 'light';
    }
    return 'dark';
}

var Colors = {
    background: '#F1EFF1',
};

var SkeletonContext = React__namespace.createContext({});
var SkeletonProvider = function (_a) {
    var children = _a.children;
    var _b = React__namespace.useState(Colors.background), backgroundColor = _b[0], setBackgroundColor = _b[1];
    var _c = React__namespace.useState('shimmer'), animation = _c[0], setAnimation = _c[1];
    var _d = React__namespace.useState(), highlight = _d[0], setHighlight = _d[1];
    var _e = React__namespace.useState(1), animationDuration = _e[0], setAnimationDuration = _e[1];
    var changeBackgroundColor = React__namespace.useCallback(function (color) {
        setBackgroundColor(color);
    }, []);
    var changeAnimation = React__namespace.useCallback(function (anim) {
        setAnimation(anim);
    }, []);
    var changeHighlight = React__namespace.useCallback(function (high) {
        setHighlight(high);
    }, []);
    var changeAnimationDuration = React__namespace.useCallback(function (duration) {
        setAnimationDuration(duration);
    }, []);
    return (React__namespace.createElement(SkeletonContext.Provider, { value: {
            backgroundColor: backgroundColor,
            changeBackgroundColor: changeBackgroundColor,
            animation: animation,
            changeAnimation: changeAnimation,
            highlight: highlight,
            changeHighlight: changeHighlight,
            animationDuration: animationDuration,
            changeAnimationDuration: changeAnimationDuration,
        } }, children));
};
function useSkeleton() {
    var context = React__namespace.useContext(SkeletonContext);
    if (!context) {
        throw new Error('useSkeleton must be used within an SkeletonProvider');
    }
    return context;
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}

function withSkeletonContext(WrappedComponent) {
    var Wrapper = function (props) {
        return (React__namespace.createElement(SkeletonProvider, null,
            React__namespace.createElement(WrappedComponent, __assign({}, props))));
    };
    return Wrapper;
}

var StyledContainer = styled__default['default'].div(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject([""], [""])));
var templateObject_1$1;

var BaseSkeletonThemeProvider = function (_a) {
    var _b = _a.color, color = _b === void 0 ? Colors.background : _b, _c = _a.animation, animation = _c === void 0 ? 'shimmer' : _c, _d = _a.animationDuration, animationDuration = _d === void 0 ? 1 : _d, style = _a.style, highlight = _a.highlight, children = _a.children, _e = _a.dataTestId, dataTestId = _e === void 0 ? 'SkeletonThemeProvider' : _e;
    var _f = useSkeleton(), changeBackgroundColor = _f.changeBackgroundColor, changeAnimation = _f.changeAnimation, changeHighlight = _f.changeHighlight, changeAnimationDuration = _f.changeAnimationDuration;
    React__namespace.useEffect(function () {
        changeBackgroundColor(color);
    }, [color, changeBackgroundColor]);
    React__namespace.useEffect(function () {
        changeAnimation(animation);
    }, [animation, changeAnimation]);
    React__namespace.useEffect(function () {
        if (highlight) {
            changeHighlight(highlight);
        }
    }, [highlight, changeHighlight]);
    React__namespace.useEffect(function () {
        changeAnimationDuration(animationDuration);
    }, [animationDuration, changeAnimationDuration]);
    return (React__namespace.createElement(StyledContainer, { style: style, "data-testid": dataTestId }, children));
};
var SkeletonThemeProvider = withSkeletonContext(BaseSkeletonThemeProvider);

var shimmerAnimation = styled.keyframes(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  0% {\n    background-position: 0% 0%;\n  }\n  100% {\n    background-position: -135% 0%;\n  }\n"], ["\n  0% {\n    background-position: 0% 0%;\n  }\n  100% {\n    background-position: -135% 0%;\n  }\n"])));
var opacityAnimation = function (backgroundColor, isLighten) { return styled.keyframes(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  0% {\n    background-color: ", ";\n  }\n  100% {\n    background-color: ", ";\n  }\n"], ["\n  0% {\n    background-color: ", ";\n  }\n  100% {\n    background-color: ", ";\n  }\n"])), backgroundColor, isLighten ? polished.darken(0.2, backgroundColor) : polished.lighten(0.4, backgroundColor)); };
var AnimationVariations = function (backgroundColor, isLighten, animationDuration) { return ({
    shimmer: styled.css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    &:after {\n      position: absolute;\n      content: '';\n      width: 100%;\n      height: 100%;\n      background-image: linear-gradient(\n        to right,\n        ", " 0%,\n        ", "\n          50%,\n        ", " 100%\n      );\n      background-size: 400% 400%;\n      animation: ", " ", "s linear infinite;\n    }\n  "], ["\n    &:after {\n      position: absolute;\n      content: '';\n      width: 100%;\n      height: 100%;\n      background-image: linear-gradient(\n        to right,\n        ", " 0%,\n        ", "\n          50%,\n        ", " 100%\n      );\n      background-size: 400% 400%;\n      animation: ", " ", "s linear infinite;\n    }\n  "])), backgroundColor, isLighten
        ? polished.darken(0.2, backgroundColor)
        : polished.lighten(0.2, backgroundColor), backgroundColor, shimmerAnimation, animationDuration),
    opacity: styled.css(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n    animation: ", "\n      ", "s linear infinite alternate;\n  "], ["\n    animation: ", "\n      ", "s linear infinite alternate;\n  "])), opacityAnimation(backgroundColor, isLighten), animationDuration),
}); };
var StyledSkeletonContainer = styled__default['default'].div(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  width: ", ";\n  height: ", ";\n  background: ", ";\n  position: relative;\n  overflow: hidden;\n  border-radius: ", ";\n\n  &:not(:last-child) {\n    margin-bottom: ", ";\n  }\n\n  ", "\n"], ["\n  width: ", ";\n  height: ", ";\n  background: ", ";\n  position: relative;\n  overflow: hidden;\n  border-radius: ", ";\n\n  &:not(:last-child) {\n    margin-bottom: ", ";\n  }\n\n  ", "\n"])), function (props) { return props.width; }, function (props) { return props.height; }, function (props) { return props.backgroundColor; }, function (props) { return props.borderRadius; }, function (props) { return props.spaceBetween; }, function (props) {
    return AnimationVariations(props.backgroundColor, props.isLighten, props.animationDuration)[props.animation];
});
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;

var Skeleton = function (_a) {
    var _b = _a.height, height = _b === void 0 ? '30px' : _b, _c = _a.width, width = _c === void 0 ? '100%' : _c, _d = _a.borderRadius, borderRadius = _d === void 0 ? '4px' : _d, style = _a.style, _e = _a.count, count = _e === void 0 ? 1 : _e, _f = _a.spaceBetween, spaceBetween = _f === void 0 ? '10px' : _f, widthMultiple = _a.widthMultiple, heightMultiple = _a.heightMultiple, _g = _a.dataTestId, dataTestId = _g === void 0 ? 'Skeleton' : _g;
    var _h = useSkeleton(), backgroundColor = _h.backgroundColor, animation = _h.animation, highlight = _h.highlight, animationDuration = _h.animationDuration;
    var _j = React__namespace.useState(true), isLighten = _j[0], setIsLighten = _j[1];
    React__namespace.useEffect(function () {
        if (highlight) {
            setIsLighten(highlight !== 'light');
        }
        else {
            var isColorLight = lightOrDark(backgroundColor);
            setIsLighten(isColorLight === 'light');
        }
    }, [highlight, backgroundColor]);
    var renderSkeleton = Array.from(Array(count).keys()).map(function (_, index) {
        var key = (Math.random() * 100000).toFixed(5);
        var witdthSkeleton = (widthMultiple === null || widthMultiple === void 0 ? void 0 : widthMultiple.length)
            ? widthMultiple[index] || width
            : width;
        var heightSkeleton = (heightMultiple === null || heightMultiple === void 0 ? void 0 : heightMultiple.length)
            ? heightMultiple[index] || height
            : height;
        return (React__namespace.createElement(StyledSkeletonContainer, { isLighten: isLighten, backgroundColor: backgroundColor, animation: animation, animationDuration: animationDuration, width: witdthSkeleton, height: heightSkeleton, borderRadius: borderRadius, style: style, spaceBetween: spaceBetween, key: key, "data-testid": dataTestId + "-" + index }));
    });
    return React__namespace.createElement(React__namespace.Fragment, null, renderSkeleton);
};
Skeleton.SkeletonThemeProvider = SkeletonThemeProvider;

exports.Skeleton = Skeleton;
//# sourceMappingURL=index.js.map
